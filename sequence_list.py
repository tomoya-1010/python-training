"""
シーケンスとは、複数の値を順番に並べたものをひとかたまりとして格納するための型です。
さまざまな種類があるが、基本的なシーケンス型として以下がある。
・リスト
　データをまとめて取り扱うことができる。基本かつ重要。
　データの要素を書き換えたり順序を変更したりすることができる。
・タプル
　リストと似ているが、後から値や順序を変更することができない。
　安全にプログラミングを作成することができる。
　※後から変更できない性質のことをイミュータブルという
・range
　引数で指定した整数の数の要素をもったrangeというシーケンスを得ることができる。
　所定の回数分ループする際に使用できる。メモリの使用量少ない。
・文字列
　"" ''でくくった文字列を変数に格納することができる。
"""

# list
# pythonではリストに何でも格納できる

l1 = [1, 3, 5, 7, 9]
l2 = ['pen', 'pineapple', 'apple', 'pen']
l3 = [1, 'pen', l1, l2]
l4 = []

print (l2[0])
print (l3[2])
print (l2[-3]) # 後ろから三番目
# print (l4[0]) # indexerror list index out of ranfge


# リストの初期化
l = ['a', 'b', 'c', 'd', 'e']

# 0番目から0番目（1番目は取得されない）
print(l[0:1]) # ['a']
# 0番目から1番目（2番目は取得されない）
print(l[0:2]) # ['a', 'b']
# 1番目から3番目
print(l[1:4]) # ['b', 'c', 'd']
# 0番目から最後の一つ手前まで
print(l[0:-1]) # ['a', 'b', 'c', 'd']
# 0番目から最後まで
print(l[0:]) # ['a', 'b', 'c', 'd', 'e']
# 0番目から98番目まで（エラーは発生しない）
print(l[:99]) # ['a', 'b', 'c', 'd', 'e']

# len関数 list内の要素数を数える

l =[1, 2, 3, 4, 5, 6, 7, 8, 9]

print (len(l))
print (l[len(l) -1]) 
print (l[len(l) - 5] )


# listの要素更新  リスト型変数[インデックス]　=　更新値

l = [0, 1, 2, 3, 4]
l[0] = 99 
print (l)

# listの要素追加 リスト型変数.append(追加したい変数)

l = [0, 1, 2]
l.append (5)
print(l)

# listに要素挿入 list型変数.insert(挿入する位置を示すインデックス, 挿入する変数)

l = ['a', 'b', 'c']
l.insert(0, 'xyz')
print(l)

# 要素削除

l = ['a', 'b', 'c']
l.remove ( 'b' )
print(l)

# 指定したインデックスを削除 del list型変数[削除対象インデックス]

la = ['a', 'b', 'c']
del la [1]
del la [-1]
print(la)

lb = ['a', 'b', 'c', 'd', 'e', 'f']
del lb [0:6]
print(lb)

# pop関数　指定されたインデックスの要素を柵状して、その要素を戻りちろして返す

l = ['a', 'b', 'c', 'd']
x = l.pop(1) # 1番目の要素を取り出して削除する
y = l.pop(1)
z = l.pop(1)
print(x,y,z) # 'c'
print(l) # ['a', 'b', 'd']


# sorted 新たにソートされたlistを生成したい場合に利用する
# sorted(list型変数, [key], [reverse])
# keyを指定すると、ソート前に行う処理を指定できます。
# 引数のreverseにTrueを指定すると、ソート順序が逆順になります。

# 昇順にソートする
l1 = ['d', 'b', 'c', 'a']
l2 = sorted(l1)
print(l2) # ['a', 'b', 'c', 'd']

lx = ['6', '4', '9', '1']
ly = sorted(lx)
print(ly) # ['1', '4', '6', '9']

# ソートを逆順にする（引数のreverseにTrueを指定すると逆順になる）
l1 = ['d', 'b', 'c', 'a']
l2 = sorted(l1, reverse=True)
print(l2) # ['d', 'c', 'b', 'a']

# listをソートする　list型変数.sorte([key], [reverse])


l = ['bc', 'ac', 'bD', 'AB']
l.sort(key=str.lower) 
# 引数keyにstr.lowerを指定すると、大文字と小文字を区別しないでソートされる。
print(l) # ['AB', 'ac', 'bc', 'bD']



